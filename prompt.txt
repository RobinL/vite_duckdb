src/App.css
---
#root {
  max-width: 1280px;
  margin: 0 auto;
  padding: 2rem;
}

.container {
  width: 100%;
}

.data-table {
  width: 100%;
  border-collapse: collapse;
  margin-top: 1rem;
  background: white;
  box-shadow: 0 1px 3px rgba(0, 0, 0, 0.1);
}

.data-table th,
.data-table td {
  padding: 12px;
  text-align: left;
  border-bottom: 1px solid #eee;
}

.data-table th {
  background-color: #f8f9fa;
  font-weight: 600;
}

.data-table tbody tr:hover {
  background-color: #f5f5f5;
}

h1 {
  margin-bottom: 1rem;
  color: #333;
}



---
src/App.jsx
---
// src/App.jsx
import { useState, useEffect } from 'react';
import { executeSelectQuery } from './services/database';
import './App.css';

function App() {
  const [results, setResults] = useState([]);
  const [loading, setLoading] = useState(true);
  const [error, setError] = useState(null);

  useEffect(() => {
    async function fetchData() {
      try {
        const sql = `
        SELECT
          ST_Area(ST_MakeEnvelope(lng_min, lat_min, lng_max, lat_max)) AS area,
          *
        FROM buses
        `;
        const rows = await executeSelectQuery(sql);
        setResults(rows);
        setLoading(false);
      } catch (err) {
        console.error('Error:', err);
        setError(err.message);
        setLoading(false);
      }
    }

    fetchData();
  }, []);

  if (loading) return <div>Loading...</div>;
  if (error) return <div>Error: {error}</div>;

  return (
    <div className="container">
      <h1>Bus Data</h1>
      {results.length > 0 ? (
        <table className="data-table">
          <thead>
            <tr>
              {Object.keys(results[0]).map(header => (
                <th key={header}>{header}</th>
              ))}
            </tr>
          </thead>
          <tbody>
            {results.map((row, index) => (
              <tr key={index}>
                {Object.values(row).map((value, i) => (
                  <td key={i}>{value}</td>
                ))}
              </tr>
            ))}
          </tbody>
        </table>
      ) : (
        <p>No data found</p>
      )}
    </div>
  );
}

export default App;

---
src/index.css
---
:root {

}



---
src/main.jsx
---
import { StrictMode } from 'react'
import { createRoot } from 'react-dom/client'
import './index.css'
import App from './App.jsx'

createRoot(document.getElementById('root')).render(
  <StrictMode>
    <App />
  </StrictMode>,
)


---
src/services/database.js
---
// src/services/database.js
import * as duckdb from '@duckdb/duckdb-wasm';
import duckdb_wasm from '@duckdb/duckdb-wasm/dist/duckdb-eh.wasm?url';
import duckdb_worker from '@duckdb/duckdb-wasm/dist/duckdb-browser-eh.worker.js?url';

let dbInstance = null;
let connection = null;
let initializationPromise = null; // A promise to handle concurrent initialization

export async function initializeDatabase() {
    if (initializationPromise) {
        // If initialization is already in progress, wait for it
        return initializationPromise;
    }

    initializationPromise = (async () => {
        if (dbInstance && connection) {
            return { db: dbInstance, conn: connection };
        }

        const DUCKDB_BUNDLES = {
            eh: {
                mainModule: duckdb_wasm,
                mainWorker: duckdb_worker,
            },
        };

        const bundle = await duckdb.selectBundle(DUCKDB_BUNDLES);
        const worker = new Worker(bundle.mainWorker);
        const logger = new duckdb.ConsoleLogger();
        dbInstance = new duckdb.AsyncDuckDB(logger, worker);

        await dbInstance.instantiate(bundle.mainModule, { query: { castBigIntToDouble: true } });

        // Load the database file
        const response = await fetch('/db.duckdb');
        const arrayBuffer = await response.arrayBuffer();
        await dbInstance.registerFileBuffer('db.duckdb', new Uint8Array(arrayBuffer));

        connection = await dbInstance.connect();

        // Attach the database
        await connection.query("ATTACH DATABASE 'db.duckdb' AS attached_db");
        await connection.query("USE attached_db");
        await connection.query("LOAD spatial;");

        return { db: dbInstance, conn: connection };
    })();

    return initializationPromise;
}

/**
 * Executes a SELECT query and returns the result as an array of dictionaries.
 * @param {string} sql - The SELECT query to execute.
 * @returns {Promise<Array<Object>>} - The result set as an array of dictionaries.
 */
export async function executeSelectQuery(sql) {
    try {
        const { conn } = await initializeDatabase();
        const result = await conn.query(sql);
        return result.toArray().map(row => row.toJSON());
    } catch (error) {
        console.error('Error executing SELECT query:', error);
        throw error;
    }
}

---
